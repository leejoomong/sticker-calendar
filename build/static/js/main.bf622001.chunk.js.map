{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","now","Date","year","getFullYear","month","getMonth","dayToText","getDate","0","1","2","3","4","5","6","useState","thisMonth","setThisMonth","useEffect","getDatesInMonth","className","Container","style","color","letterSpacing","7","8","9","10","11","toUpperCase","width","date","numOfDays","numOfRows","parseInt","dateArray","firstDay","getDay","Array","push","makeDateArray","headerCells","Object","values","map","day","idx","Table","Cell","contentsCell","content","Grid","Row","padding","margin","Column","background","Icon","name","size","celled","textAlign","Header","Body","fill","_","week","slice","rows","makeCalendar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf622001.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Container, Table, Grid, Icon } from \"semantic-ui-react\";\n\nfunction App() {\n  const now = new Date();\n  const year = now.getFullYear();\n  // January is 0\n  const month = now.getMonth();\n  const date = now.getDate();\n  const monthToText = {\n    0: \"January\",\n    1: \"February\",\n    2: \"March\",\n    3: \"April\",\n    4: \"May\",\n    5: \"June\",\n    6: \"July\",\n    7: \"August\",\n    8: \"September\",\n    9: \"October\",\n    10: \"November\",\n    11: \"December\",\n  };\n  const dayToText = {\n    0: \"Sunday\",\n    1: \"Monday\",\n    2: \"Tuesday\",\n    3: \"Wednesday\",\n    4: \"Thursday\",\n    5: \"Friday\",\n    6: \"Saturday\",\n  };\n\n  const [thisMonth, setThisMonth] = useState(1);\n\n  useEffect(() => {\n    setThisMonth(month);\n    // makeCalendar(year, month, day)\n  }, [year, month]);\n\n  const getDatesInMonth = (year, month) => {\n    return new Date(year, month, 0).getDate();\n  };\n\n  const makeDateArray = (year, month) => {\n    let dateArray = []\n    let date = 1;\n    const numOfDays = getDatesInMonth(year, month);\n    const firstDay = new Date(year, month, 1).getDay()\n    for (let i of new Array(firstDay)) {\n      dateArray.push(0)\n    }\n    for (let i of new Array(numOfDays)) {\n      dateArray.push(date++)\n    }\n    return dateArray\n  }\n\n  const makeCalendar = (year, month, date) => {\n    const numOfDays = getDatesInMonth(year, month);\n    const numOfRows = parseInt(numOfDays / 7 + 1);\n    const dateArray = makeDateArray(year, month)\n    \n    let headerCells = Object.values(dayToText).map((day, idx) => {\n      let color = idx === 0 ? \"#FF7473\" : idx === 6 ? \"#47B8E0\" : \"#34314C\"\n      return <Table.Cell key={idx}><b style={{color: color}}>{day}</b></Table.Cell>;\n    });\n\n    let contentsCell = (content, color=\"#34314C\") => {\n      if (content === 0 || !content) {\n        return (\n          <Table.Cell key={content}>\n          </Table.Cell>\n        )\n      }\n      else {\n        return (\n          <Table.Cell key={content}>\n            <Grid>\n              <Grid.Row style={{padding: 0, margin: 0}}>\n                <Grid.Column style={{padding: 0, margin:0, background: \"#F6F6F6\"}}>\n                  <font color={ color }>{ content }</font>\n                </Grid.Column>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Column>\n                  <Icon name=\"heart\" size=\"big\" style={{ color: \"#FFC952\"}} />\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          \n          </Table.Cell>\n        )\n      }\n    }\n\n    let row = week => {\n      return(\n        <Table.Row>\n          {contentsCell(week[0], \"#FF7473\")}\n          {contentsCell(week[1])}\n          {contentsCell(week[2])}\n          {contentsCell(week[3])}\n          {contentsCell(week[4])}\n          {contentsCell(week[5])}\n          {contentsCell(week[6], \"#47B8E0\")}\n        </Table.Row>\n      )\n    }\n\n    let rows = dateArray => {\n      let weeks = new Array(numOfRows).fill(0).map((_, idx) => {\n        return(row(dateArray.slice(idx*7, idx*7+7)))\n      } )\n      return weeks\n    }\n\n    return (\n      <Table celled textAlign=\"center\">\n        <Table.Header width=\"5%\">\n          <Table.Row>\n            {headerCells}\n          </Table.Row>\n        </Table.Header>\n        <Table.Body width=\"5%\">\n          { rows(dateArray) }\n        </Table.Body>\n      </Table>\n    );\n  }\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Container>\n          <h3 style={{ color: \"#34314C\", letterSpacing: \"3px\"}}> {monthToText[thisMonth].toUpperCase()} </h3>\n        </Container>\n      </header>\n      <body className=\"App-body\">\n        <Container width=\"80%\"> {makeCalendar(year, month, date)} </Container>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}